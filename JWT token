import jwt
import time
import requests
from urllib.parse import urlparse

# Function to generate JWT token for Zephyr Squad
def generate_jwt(http_method, jira_base_url, api_path, shared_secret, client_key, query_params=None):
    # Construct the canonical URL path
    canonical_url = urlparse(api_path).path
    
    # Get the current time (issued at time)
    issued_at = int(time.time())
    expire = issued_at + 180  # Token expiration (e.g., 3 minutes)

    # Define JWT payload (claim set)
    payload = {
        'iss': client_key,               # Client key
        'iat': issued_at,                # Issued at time
        'exp': expire,                   # Expiration time
        'qsh': jwt.encode(
            {
                'method': http_method.upper(),
                'path': canonical_url,
                'query': query_params if query_params else ""
            }, shared_secret, algorithm='HS256')
    }

    # Generate the JWT token
    token = jwt.encode(payload, shared_secret, algorithm='HS256')

    return token

# Example usage
if __name__ == "__main__":
    jira_base_url = "https://your-jira-instance.atlassian.net"
    api_path = "/rest/zapi/latest/execution"  # API endpoint
    http_method = "GET"  # or POST/PUT/DELETE depending on your request
    shared_secret = "your_shared_secret"
    client_key = "your_client_key"
    query_params = None  # Any query parameters for the API, if needed

    # Generate JWT token
    jwt_token = generate_jwt(http_method, jira_base_url, api_path, shared_secret, client_key, query_params)

    print("Generated JWT Token:", jwt_token)
    
    # Now you can use this JWT token to make an authenticated API request to Zephyr Squad
    headers = {
        "Authorization": f"JWT {jwt_token}",
        "Content-Type": "application/json"
    }

    # Example API call
    response = requests.get(f"{jira_base_url}{api_path}", headers=headers)
    print(response.status_code, response.text)

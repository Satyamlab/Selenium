import openpyxl
from openpyxl import Workbook
from openpyxl.worksheet.datavalidation import DataValidation
import requests
import json
import os

# Jira and Zephyr API details
JIRA_BASE_URL = "https://your-jira-instance.atlassian.net"
ZEPHYR_BASE_URL = "https://your-zephyr-instance"
API_TOKEN = "your_api_token"
USERNAME = "your_jira_email"
PROJECT_KEY = "your_project_key"

HEADERS = {
    "Authorization": f"Bearer {API_TOKEN}",
    "Content-Type": "application/json"
}

def fetch_dropdown_values(field_key):
    """Fetch dropdown values from Jira based on the field ID."""
    url = f"{JIRA_BASE_URL}/rest/api/3/field/{field_key}/context/projectmapping"
    response = requests.get(url, headers=HEADERS)
    if response.status_code == 200:
        field_data = response.json()
        return [item['value'] for item in field_data['allowedValues']]  # Adjust this based on the field structure
    return []

def create_excel_template():
    """Create an Excel template for uploading test cases if the file doesn't exist."""
    template_path = "Jira_Test_Cases_Template.xlsx"
    
    if not os.path.exists(template_path):
        print("Template does not exist. Creating template...")
        
        wb = Workbook()
        ws = wb.active
        ws.title = "TestCases"
        
        # Add headers
        headers = ["Summary", "Priority", "Issue Type", "Step Description", "Expected Result", "Test Data"]
        ws.append(headers)
        
        # Fetch dropdown values for priority and issue type from Jira
        priority_values = fetch_dropdown_values("priority")
        issue_type_values = fetch_dropdown_values("issuetype")
        
        # Create a hidden sheet to store dropdown values
        ws_data = wb.create_sheet("DropdownValues")
        for idx, val in enumerate(priority_values, start=1):
            ws_data[f"A{idx}"] = val
        for idx, val in enumerate(issue_type_values, start=1):
            ws_data[f"B{idx}"] = val
        
        # Apply data validation to Priority and Issue Type columns
        priority_validation = DataValidation(type="list", formula1="DropdownValues!A1:A{}".format(len(priority_values)))
        issue_type_validation = DataValidation(type="list", formula1="DropdownValues!B1:B{}".format(len(issue_type_values)))
        
        ws.add_data_validation(priority_validation)
        ws.add_data_validation(issue_type_validation)
        
        priority_validation.add(ws["B2:B100"])  # Limit to the first 100 rows
        issue_type_validation.add(ws["C2:C100"])
        
        wb.save(template_path)
        print("Template created successfully.")
    else:
        print("Template already exists. You can populate it and upload test cases.")

def upload_test_cases():
    """Upload test cases to Jira based on the content in the Excel template."""
    template_path = "Jira_Test_Cases_Template.xlsx"
    
    if os.path.exists(template_path):
        wb = openpyxl.load_workbook(template_path)
        ws = wb["TestCases"]
        
        test_cases = []
        for row in ws.iter_rows(min_row=2, values_only=True):
            summary, priority, issue_type, step_desc, expected_result, test_data = row
            if summary:  # If summary exists, consider this a valid test case
                test_case = {
                    "fields": {
                        "summary": summary,
                        "priority": {"name": priority},
                        "issuetype": {"name": issue_type},
                        "project": {"key": PROJECT_KEY}
                    },
                    "steps": [
                        {"description": step_desc, "expected_result": expected_result, "test_data": test_data}
                    ]
                }
                test_cases.append(test_case)
        
        if not test_cases:
            print("No valid test cases found for upload. Please populate the template.")
            return
        
        # Confirm upload
        confirmation = input("Do you want to upload the test cases to Jira? (yes/no): ").lower()
        if confirmation == "yes":
            for test_case in test_cases:
                # Create issue in Jira
                response = requests.post(f"{JIRA_BASE_URL}/rest/api/3/issue", headers=HEADERS, json=test_case['fields'])
                if response.status_code == 201:
                    issue_key = response.json().get('key')
                    print(f"Test case created with key: {issue_key}")
                    # Create steps in Zephyr Squad
                    create_test_steps(issue_key, test_case['steps'])
                else:
                    print(f"Failed to create test case: {test_case['fields']['summary']}")
        else:
            print("Upload cancelled by the user.")
    else:
        print("No template found. Please generate a template first.")

def create_test_steps(issue_key, steps):
    """Create test steps in Zephyr Squad."""
    for step in steps:
        step_payload = {
            "issueId": issue_key,
            "step": step["description"],
            "data": step["test_data"],
            "result": step["expected_result"]
        }
        response = requests.post(f"{ZEPHYR_BASE_URL}/rest/zephyr/1.0/teststep", headers=HEADERS, json=step_payload)
        if response.status_code == 201:
            print(f"Step created successfully for issue {issue_key}")
        else:
            print(f"Failed to create step for issue {issue_key}")

if __name__ == "__main__":
    # Check if the template exists
    if not os.path.exists("Jira_Test_Cases_Template.xlsx"):
        create_excel_template()
    else:
        upload_test_cases()

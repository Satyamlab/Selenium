import openpyxl
import os
import requests
from requests.auth import HTTPBasicAuth
from openpyxl.worksheet.datavalidation import DataValidation

# Jira API configurations
JIRA_URL = "https://your-domain.atlassian.net/rest/api/3/issue"
USERNAME = "your-email@example.com"  # Your Jira account email
API_TOKEN = "your-api-token"          # Your Jira API token
PROJECT_KEY = "YOUR_PROJECT_KEY"      # e.g., "TEST"

HEADERS = {
    "Authorization": f"Basic {requests.auth._basic_auth_str(USERNAME, API_TOKEN)}",
    "Content-Type": "application/json"
}

# Function to fetch dropdown values from Jira
def fetch_dropdown_values(field_id):
    print(f"Fetching dropdown values for field ID: {field_id}...")
    options_url = f"https://your-domain.atlassian.net/rest/api/3/field/{field_id}/option"
    
    try:
        response = requests.get(options_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN))
        response.raise_for_status()  # Raise an error for bad responses
        options = response.json().get('options', [])
        values = [option['value'] for option in options]
        print(f"Dropdown values fetched: {values}")
        return values  
    except requests.exceptions.RequestException as e:
        print(f"Error fetching options for field '{field_id}': {e}")
        return []

# Function to create the Excel template
def create_template(file_name):
    if os.path.exists(file_name):
        print(f"Template '{file_name}' already exists. Skipping creation.")
        return

    print(f"Creating template '{file_name}'...")
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Test Cases"

    # Define mandatory columns
    headers = ["Summary", "Description", "Test Steps", "Expected Result", "Priority"]

    # Write headers to the first row
    ws.append(headers)

    # Fetch dropdown values for Priority (example field ID, replace with actual)
    priority_options = fetch_dropdown_values("customfield_10001")  # Example field ID

    # Add dropdown for the Priority column
    if priority_options:
        dv = DataValidation(type="list", formula1=f'"{",".join(priority_options)}"', showDropDown=True)
        ws.add_data_validation(dv)

        # Apply the data validation to the Priority column (5th column)
        for row in range(2, 102):  # Allow 100 rows for test cases
            cell = f"E{row}"
            dv.add(ws[cell])

    # Save the template
    try:
        wb.save(file_name)
        print(f"Template '{file_name}' created successfully.")
    except Exception as e:
        print(f"Error saving template '{file_name}': {e}")

# Function to upload test cases to Jira
def upload_test_cases(file_name):
    if not os.path.exists(file_name):
        print(f"Template '{file_name}' does not exist. Please create it first.")
        return

    # Load test cases only if the template file exists
    print(f"Loading test cases from '{file_name}'...")
    try:
        wb = openpyxl.load_workbook(file_name)
        ws = wb.active
    except Exception as e:
        print(f"Error loading the workbook '{file_name}': {e}")
        return

    # Check if there are any valid test cases to upload
    valid_cases = []
    for row in ws.iter_rows(min_row=2, values_only=True):
        if any(cell is not None for cell in row):
            valid_cases.append(row)

    if not valid_cases:
        print("No valid test cases found for upload. Please populate the template.")
        return

    print("Starting to upload test cases...")
    for row in valid_cases:
        summary, description, test_steps, expected_result, priority = row
        
        # Basic validation for required fields
        if not summary or not description:
            print(f"Skipping test case due to missing summary or description: {row}")
            continue

        print(f"Uploading: Summary='{summary}', Description='{description}'")

        json_payload = {
            "fields": {
                "project": {
                    "key": PROJECT_KEY
                },
                "summary": summary,
                "description": description,
                "issuetype": {
                    "name": "Test Case"
                },
                "customfield_10001": priority  # Replace with actual custom field ID for Priority
            }
        }

        try:
            response = requests.post(JIRA_URL, json=json_payload, auth=HTTPBasicAuth(USERNAME, API_TOKEN))
            response.raise_for_status()  # Raise an error for bad responses
            print(f"Test case '{summary}' uploaded successfully!")
        except requests.exceptions.RequestException as e:
            print(f"Error uploading test case '{summary}': {e}")

# Main execution flow
if __name__ == "__main__":
    file_name = "Jira_Test_Cases_Template.xlsx"

    # Create the Excel template if it does not exist
    create_template(file_name)

    # After creating the template, prompt the user to populate it and upload test cases.
    user_input = input("Do you want to upload test cases now? (yes/no): ").strip().lower()
    if user_input == "yes":
        upload_test_cases(file_name)
    else:
        print("Please populate the template and run the upload function later.")

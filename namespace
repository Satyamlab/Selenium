import org.xmlunit.builder.DiffBuilder;
import org.xmlunit.diff.Diff;
import org.xmlunit.diff.Difference;
import org.xmlunit.diff.DifferenceEvaluators;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.InputSource;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.HashMap;
import java.util.Map;

import com.thoughtworks.gauge.Step;
import com.thoughtworks.gauge.messages.Messages;

public class XmlComparisonSteps {

    @Step("Compare XML responses and highlight differences in namespaces and content")
    public void compareXmlResponsesWithNsTags() throws Exception {
        // Example XML API responses with namespaces inside <DisambiguateResponse>
        String response1 = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">" +
                "<soapenv:Body><ns2:DisambiguateResponse xmlns=\"http://example.com/schema2\" xmlns:ns1=\"http://example.com/schema2\">" +
                "<ns2:name>John</ns2:name><ns2:age>30</ns2:age></ns2:DisambiguateResponse></soapenv:Body></soapenv:Envelope>";

        String response2 = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">" +
                "<soapenv:Body><ns1:DisambiguateResponse xmlns=\"http://example.com/schema2\" xmlns:ns2=\"http://example.com/schema2\">" +
                "<ns1:name>John</ns1:name><ns1:age>31</ns1:age></ns1:DisambiguateResponse></soapenv:Body></soapenv:Envelope>";

        // Compare XML responses
        String diffHtml = compareXmlResponses(response1, response2);

        // Embed the differences in the Gauge HTML report
        Messages.writeMessage("<div>" + diffHtml + "</div>");
    }

    // Function to compare XML responses, focusing on the DisambiguateResponse element
    private String compareXmlResponses(String xml1, String xml2) throws Exception {
        // Parse both XMLs with namespace awareness
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        DocumentBuilder builder = factory.newDocumentBuilder();

        Document doc1 = builder.parse(new InputSource(new StringReader(xml1)));
        Document doc2 = builder.parse(new InputSource(new StringReader(xml2)));

        // Extract the <DisambiguateResponse> elements from both XMLs
        Element responseElement1 = extractDisambiguateResponse(doc1);
        Element responseElement2 = extractDisambiguateResponse(doc2);

        // Normalize namespaces by URIs (extract dynamically)
        Document normalizedDoc1 = normalizeNamespaces(responseElement1, doc2);
        Document normalizedDoc2 = normalizeNamespaces(responseElement2, doc1);

        // Convert documents back to strings for comparison
        String normalizedXml1 = elementToString(normalizedDoc1.getDocumentElement());
        String normalizedXml2 = elementToString(normalizedDoc2.getDocumentElement());

        // Compare the two normalized XML documents
        Diff xmlDiff = DiffBuilder.compare(normalizedXml1)
                                  .withTest(normalizedXml2)
                                  .withDifferenceEvaluator(DifferenceEvaluators.Default)
                                  .checkForSimilar() // Allow for structural similarity
                                  .ignoreWhitespace() // Ignore whitespace differences
                                  .build();

        // Generate HTML diff report including namespace differences
        return "<h3>XML Content Differences (Namespaces Normalized)</h3>" + generateHtmlDiff(xmlDiff);
    }

    // Function to extract the <DisambiguateResponse> element from the XML document
    private Element extractDisambiguateResponse(Document doc) {
        // Find the DisambiguateResponse element by its tag name, which may have any prefix
        return (Element) doc.getElementsByTagNameNS("*", "DisambiguateResponse").item(0);
    }

    // Normalize namespaces in the given element by matching namespaces from the other document
    private Document normalizeNamespaces(Element element, Document targetDoc) throws Exception {
        // Create a new empty document
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document newDoc = builder.newDocument();

        // Import the element into the new document
        newDoc.appendChild(newDoc.importNode(element, true));

        // Extract namespaces from the target document and match URIs
        Map<String, String> targetNsMap = extractNamespaces(targetDoc);

        // Normalize namespaces based on URIs
        normalizeNamespacePrefixes(newDoc.getDocumentElement(), targetNsMap);

        return newDoc;
    }

    // Function to extract namespaces from the document (prefix -> URI map)
    private Map<String, String> extractNamespaces(Document doc) {
        Map<String, String> namespaceMap = new HashMap<>();
        Element root = doc.getDocumentElement();
        for (int i = 0; i < root.getAttributes().getLength(); i++) {
            Node attr = root.getAttributes().item(i);
            if (attr.getNodeName().startsWith("xmlns:")) {
                String prefix = attr.getNodeName().substring(6);
                String uri = attr.getNodeValue();
                namespaceMap.put(prefix, uri);
            }
        }
        return namespaceMap;
    }

    // Function to normalize namespace prefixes in the document
    private void normalizeNamespacePrefixes(Element element, Map<String, String> targetNsMap) {
        for (int i = 0; i < element.getAttributes().getLength(); i++) {
            Node attr = element.getAttributes().item(i);
            if (attr.getNodeName().startsWith("xmlns:")) {
                String prefix = attr.getNodeName().substring(6);
                String uri = attr.getNodeValue();

                // If the URI matches one from the target document, normalize the prefix
                String targetPrefix = getPrefixByUri(targetNsMap, uri);
                if (targetPrefix != null && !targetPrefix.equals(prefix)) {
                    element.setAttribute("xmlns:" + targetPrefix, uri);
                }
            }
        }
    }

    // Function to get the prefix for a given URI from the namespace map
    private String getPrefixByUri(Map<String, String> nsMap, String uri) {
        for (Map.Entry<String, String> entry : nsMap.entrySet()) {
            if (entry.getValue().equals(uri)) {
                return entry.getKey();
            }
        }
        return null;
    }

    // Convert XML element back to string for comparison
    private String elementToString(Element element) throws Exception {
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        StringWriter writer = new StringWriter();
        transformer.transform(new DOMSource(element), new StreamResult(writer));
        return writer.toString();
    }

    // Function to generate HTML diff report from XML differences
    private String generateHtmlDiff(Diff xmlDiff) {
        StringBuilder diffHtml = new StringBuilder();
        diffHtml.append("<table border='1' style='border-collapse: collapse;'><thead><tr><th>XPath</th><th>Expected</th><th>Actual</th></tr></thead><tbody>");

        for (Difference difference : xmlDiff.getDifferences()) {
            diffHtml.append("<tr>");
            diffHtml.append("<td><b>XPath:</b> ").append(difference.getComparison().getControlDetails().getXPath()).append("</td>");
            diffHtml.append("<td><b>Expected:</b> ").append(difference.getComparison().getControlDetails().getValue()).append("</td>");
            diffHtml.append("<td><b>Actual:</b> ").append(difference.getComparison().getTestDetails().getValue()).append("</td>");
            diffHtml.append("</tr>");
        }

        diffHtml.append("</tbody></table>");
        return diffHtml.toString();
    }
}

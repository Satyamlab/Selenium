import jwt
import hashlib
import time
import requests
from urllib.parse import urlparse, parse_qs

# Function to generate QSH (Query String Hash)
def generate_qsh(method, full_url):
    # Parse the full URL
    parsed_url = urlparse(full_url)
    
    # Extract the canonical path
    canonical_url = parsed_url.path

    # Extract query parameters (if any)
    query_params = parse_qs(parsed_url.query)

    # Sort query parameters and create a query string
    if query_params:  # If query parameters are present
        sorted_query = '&'.join([f"{k}={','.join(v)}" for k, v in sorted(query_params.items())])
    else:  # If no query parameters are present, set it to an empty string
        sorted_query = ''

    # Create the canonical request string (method, path, and sorted query)
    qsh_string = f"{method.upper()}&{canonical_url}&{sorted_query}"

    # Hash the canonical string using SHA256
    qsh_hash = hashlib.sha256(qsh_string.encode('utf-8')).hexdigest()
    
    return qsh_hash

# Function to generate JWT Token
def generate_jwt_token(account_id, access_key, secret_key, qsh):
    payload = {
        'sub': account_id,  # The account ID of the user making the request
        'qsh': qsh,         # The generated QSH hash
        'iss': access_key,   # The access key
        'iat': int(time.time()),  # Issued at time (current time)
        'exp': int(time.time()) + 3600  # Expiration time (1 hour)
    }

    # Generate and sign the JWT using the secret key
    token = jwt.encode(payload, secret_key, algorithm='HS256')
    return token

# Function to fetch test cycles in a version using the full URL with query parameters
def fetch_test_cycles(full_url, account_id, access_key, secret_key):
    # Generate QSH
    qsh = generate_qsh('GET', full_url)

    # Generate JWT token
    jwt_token = generate_jwt_token(account_id, access_key, secret_key, qsh)

    # Set headers for the API request
    headers = {
        'Authorization': f'JWT {jwt_token}',
        'Content-Type': 'application/json'
    }

    # Make the API request
    response = requests.get(full_url, headers=headers, verify=False)

    # Check response status
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Error: {response.status_code}, {response.text}")

# Main execution
if __name__ == "__main__":
    # Replace these with your actual Zephyr for Jira credentials and IDs
    full_url = "https://prod-play.zephyr.com/public/rest/api/1.0/cycles/search?projectId=12345&versionId=67890"
    account_id = "your-account-id"
    access_key = "your-access-key"
    secret_key = "your-secret-key"

    try:
        cycles = fetch_test_cycles(full_url, account_id, access_key, secret_key)
        print("Cycles List:", cycles)
    except Exception as e:
        print(e)
